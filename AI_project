#namen: Bodhi Kiewiet, Ihab Al-Safadi, Anton Bijker
#project: 4 op een rij ai

import random

class Board:
    """A data type representing a Connect-4 board
       with an arbitrary number of rows and columns.
    """

    def __init__(self, width, height):
        """Construct objects of type Board, with the given width and height."""
        self.width = width
        self.height = height
        self.data = [[' ']*width for row in range(height)]

        # We hoeven niets terug te geven vanuit een constructor!

    def __repr__(self):
        """This method returns a string representation
           for an object of type Board.
        """
        s = ''                          # de string om terug te geven
        for row in range(0, self.height):
            s += '|'
            for col in range(0, self.width):
                s += self.data[row][col] + '|'
            s += '\n'

        s += (2*self.width + 1) * '-'   # onderkant van het bord
        s += '\n'
        for row in range(0,self.width):
            s += ' '
            s += str(row%10)

        

        return s       # het bord is compleet, geef het terug
    
    def add_move(self, col, ox):
        '''voegt een move aan het board toe'''
        for row in range(0,self.height):
            if self.data[row][col]!= " ":
                self.data[row-1][col]=ox
                return
        self.data[-1][col]=ox

    def clear(self):
        '''maakt het bord leeg'''
        for row in range(0,self.height):
            for col in range(0,self.width):
                self.data[row][col]=' '        
        

    def set_board(self, move_string):
     """Accepts a string of columns and places
       alternating checkers in those columns,
       starting with 'X'.

       For example, call b.set_board('012345')
       to see 'X's and 'O's alternate on the
       bottom row, or b.set_board('000000') to
       see them alternate in the left column.

       move_string must be a string of one-digit integers.
     """
     next_checker = 'X'   # we starten door een 'X' te spelen
     for col_char in move_string:
        col = int(col_char)
        if 0 <= col <= self.width:
            self.add_move(col, next_checker)
        if next_checker == 'X':
            next_checker = 'O'
        else:
            next_checker = 'X'

    def allows_move(self, col):
        '''controleert of een move is toegestaan'''
        if col >= self.width or col < 0:
            return False
        for row in range(0,self.height):
            if self.data[row][col]==' ':
                return True
        return False
    
    def is_full(self):
        '''controleert of het bord vol is'''
        for row in range(0,self.height):
            for col in range(0,self.width):
                if self.data[row][col]==' ':
                    return False
        return True

    def del_move(self,col):
        '''haalt een move uit een kolom weg'''
        for row in range(0,self.height):
            if self.data[row][col]!=' ':
                self.data[row][col]=' '
                break
                

    def wins_for(self, ox):
        '''controleert of ox al heeft gewonnen'''
        # Controleren op horizontale overwinningen
        for row in range(0, self.height):
            for col in range(0, self.width - 3):
                if self.data[row][col] == ox and \
                self.data[row][col + 1] == ox and \
                self.data[row][col + 2] == ox and \
                self.data[row][col + 3] == ox:
                    return True
        for row in range(0, self.height-3):
            for col in range(0, self.width):
                if self.data[row][col] == ox and \
                self.data[row+1][col] == ox and \
                self.data[row+2][col] == ox and \
                self.data[row+3][col] == ox:
                    return True
        for row in range(0, self.height -3):
            for col in range(0, self.width -3):
                if self.data[row][col] == ox and \
                self.data[row +1][col +1] == ox and \
                self.data[row +2][col +2] == ox and \
                self.data[row +3][col +3] == ox:
                    return True
        for row in range(0, self.height -3):
            for col in range(3, self.width):
                if self.data[row][col] == ox and \
                self.data[row+1][col - 1] == ox and \
                self.data[row+2][col - 2] == ox and \
                self.data[row+3][col - 3] == ox:
                    return True
        return False
    
    
    def three_in_row(self, ox):
        """
        deze functie waarschuwt een speler als iemand bijna 4 op de rij heeft!!!
        """
        for row in range(0, self.height):
            for col in range(0, self.width - 2):
                if self.data[row][col] == ox and \
                self.data[row][col + 1] == ox and \
                self.data[row][col + 2] == ox:
                    return True

        for row in range(0, self.height-2):
            for col in range(0, self.width):
                if self.data[row][col] == ox and \
                self.data[row+1][col] == ox and \
                self.data[row+2][col] == ox:
                    return True

        for row in range(0, self.height -2):
            for col in range(0, self.width -2):
                if self.data[row][col] == ox and \
                self.data[row +1][col +1] == ox and \
                self.data[row +2][col +2] == ox:
                    return True
    
        for row in range(0, self.height -2):
            for col in range(2, self.width):
                if self.data[row][col] == ox and \
                self.data[row+1][col - 1] == ox and \
                self.data[row+2][col - 2] == ox:
                    return True
        return False
       
        
    def host_game(self):
        '''speelt het volledige vier op een rij spel'''
        print()
        print('Welkom bij Vier op een rij!')
        b = self
        print()
        while not b.is_full():
            print(b)
            users_col = -1
            while not self.allows_move(users_col):
                print()
                users_col = int(input("Keuze van X: "))
            b.add_move(users_col,"X")
            if b.wins_for("X"): 
                print()
                print("X wint -- Gefeliciteerd!")
                print()
                print(b)
                return
            if b.is_full(): break
            print()
            print(b)
             #het is mogelijk dat een bord vol is na een oneven aantal zetten dus moet hier wel een break
            users_col = -1
            while not self.allows_move(users_col):
                print()
                users_col = int(input("Keuze van O: "))
            b.add_move(users_col,"O")
            print()
            if b.wins_for("O"):
                print()
                print("O wint -- Gefeliciteerd!")
                print()
                print(b)
                return
        print()
        print("het bord is vol, het is gelijkspel!")
        print()
        print(b)
        
    def play_game(self, px, po, show_scores=False):
        """
        Plays a game of Connect Four between players px and po.
        If show_scores is True, the player's board evaluations are printed each turn.
        """
        B=[1]
        ox = 'O'
        turn_counter= 0
        switch_turns=-1 #nodige regel om de while loop hieronder te activeren
        ask_Player = input("voer 'ja' in als je wilt dat de computer jouw zet plaatst negeert en hij bepaalt de plaats in het board de kans is tot 10% "'\n')
       
        switch_xo=input('Wil je dat eens in de zoveel beurten het spel alle X en O voor elkaar verwisselt? ja of nee? ') 
        
        if ask_Player == 'ja'or ask_Player == 'j':
             B = range(10)
        
        if switch_xo=='ja' or switch_xo=="j":
            while switch_turns<0 or switch_turns>9:
                switch_turns=int(input('om de hoeveel beurten wil je dat dit verandert? (geef een nummer tussen de 1 en 10 op) '))
            
        
        while True:
            # druk het bord af
            print(self)
            if self.three_in_row('X'):
                print('pas op! X heeft bijna gewonnen!')
            
            if self.three_in_row('O'):
                print('pas op! O heeft bijna gewonnen!')

            # controleer of het spel afgelopen is
            if self.wins_for(ox):
                print(f'{ox} heeft gewonnen!')
                break
            elif self.is_full():
                print('Gelijkspel!')
                break

            #Beurten teller waardoor we kunnen bijhouden hoe vaak bijvoorbeeld bepaalde spelregels kunnen en moeten afgaan
            turn_counter+=1

            # verander de huidige speler
            if ox == 'O':
                ox = 'X'
                player = px
            else:
                ox = 'O'
                player = po

            if player == 'human':
                # laat de menselijke speler een kolom kiezen
                col = -1
                while not self.allows_move(col):
                    col = int(input('Kolom voor ' + ox + ': '))
            else:
                # de computerspeler berekent een zet
                if show_scores:
                    scores = player.scores_for(self)
                    print('Scores voor ', ox, ':', [int(sc) for sc in scores])
                    col = player.tiebreak_move(scores)
                else:
                    col = player.next_move(self)

            # voer de zet uit
            A = random.choice(B)
            if A == 9:

                x= range(self.width)
                self.add_move(random.choice(x), ox)
                print(" :P i got you ")
            else:
                self.add_move(col, ox)
            
            #de verwissel X en O regel
            if switch_xo=='ja' or switch_xo=="j":
                if turn_counter%switch_turns==0:
                    print("Pas op! X en O zijn zojuist door de chaos in ons universum omgewisseld!")
                    self.switch_xo()

    def switch_xo(self):
        '''hulpfunctie die alle X op een bord in een O verandert en vice versa'''
        for row in range(0,self.height):
            for col in range(0,self.width):
                if self.data[row][col]=='X':
                    self.data[row][col]="O"
                elif self.data[row][col]=="O":
                    self.data[row][col]="X"
        
class Player:
    """An AI player for Connect Four."""

    def __init__(self, ox, tbt, ply):
        """Construct a player for a given checker, tie-breaking type,
           and ply."""
        self.ox = ox
        self.tbt = tbt
        self.ply = ply

    def __repr__(self):
        """Create a string represenation of the player."""
        s = "Player: ox = " + self.ox + ", "
        s += "tbt = " + self.tbt + ", "
        s += "ply = " + str(self.ply)
        return s
    
    def opp_ch(self):
        '''geeft de steen van de tegenstander van de player terug'''
        if self.ox=="X": return "O"
        if self.ox=="O": return "X"
        
    def score_board(self, b):
        '''weergeeft een scoreboard gebaseerd of de AI al heeft gewonnen of heeft verloren, geeft 50 terug als er nog geen winnaar is'''
        if Board.wins_for(b,self.ox): return 100.0
        elif Board.wins_for(b,self.opp_ch()): return 0.0
        else: return 50.0
        
        
    def tiebreak_move(self,scores):
        '''geeft het index nummer terug van de lijst scores, dat hoort bij de self.tbt die aan de Player is meegegeven'''
        index_maximum_score=[]
        for i in range(len(scores)):
            if scores[i] == max(scores):
                index_maximum_score+=[i]
        if self.tbt == "LEFT":
            return index_maximum_score[0]
        if self.tbt == "RIGHT":
            return index_maximum_score[-1]
        if self.tbt == "RANDOM":
            return random.choice(index_maximum_score)
    
    def scores_for(self, b):
        '''het hart van de functie, geeft een lijst van scores terug die aangeven hoe "goed" het is om in een bepaalde kolom een move neer te zetten
           Deze functie gebruikt self.ply om te bepalen hoeveel beurten hij hiervoor vooruit kijkt en kan dus zo aangeven wat de beste move is'''
        scores=[50]*b.width
        for col in range(0,b.width):
            for row in range(0,b.height):
                if b.data[row][col]==' ':
                    scores[col]=50.0
                    break
                else: scores[col]=-1.0
            if scores[col]==-1.0:
                continue
            elif Board.wins_for(b,self.ox):
                scores[col]=100.0
            elif Board.wins_for(b,self.opp_ch()):
                scores[col]=0.0
            elif self.ply==0:
                scores[col]=50.0
            elif self.ply>0:
                op=Player(self.opp_ch(),self.tbt,(self.ply-1))
                Board.add_move(b,col,self.ox)
                scores[col]=(100-max(op.scores_for(b)))
                Board.del_move(b,col)
        return scores
    
    def next_move(self, b):
        '''Wrapper om de functie Tiebreak_move en scores_for te combineren'''
        return self.tiebreak_move(self.scores_for(b))
        
"""plaats hieronder alle assertions"""
        
#assertions voor de repr
p = Player('X', 'LEFT', 2)
assert repr(p) == 'Player: ox = X, tbt = LEFT, ply = 2'
p = Player('O', 'RANDOM', 0)
assert repr(p) == 'Player: ox = O, tbt = RANDOM, ply = 0'

#assertions voor opp_ch
p = Player('X', 'LEFT', 3)
assert p.opp_ch() == 'O'
assert Player('O', 'LEFT', 0).opp_ch() == 'X'

#assertions voor score_board
b = Board(7, 6)
b.set_board('01020305')
#print(b)
p = Player('X', 'LEFT', 0)
assert p.score_board(b) == 100.0
assert Player('O', 'LEFT', 0).score_board(b) == 0.0
assert Player('O', 'LEFT', 0).score_board(Board(7, 6)) == 50.0

#assertions voor tiebreak_move
scores = [0, 0, 50, 0, 50, 50, 0]
p = Player('X', 'LEFT', 1)
p2 = Player('X', 'RIGHT', 1)
assert p.tiebreak_move(scores) == 2
assert p2.tiebreak_move(scores) == 5
#de volgende assertion is door anton geschreven en niet uit de opdracht gehaald
p3 = Player('X', 'RANDOM', 1)
assert p3.tiebreak_move(scores) == 2 or 4 or 5
assert p3.tiebreak_move(scores) == 2 or 4 or 5
assert p3.tiebreak_move(scores) == 2 or 4 or 5
assert p3.tiebreak_move(scores) == 2 or 4 or 5
assert p3.tiebreak_move(scores) == 2 or 4 or 5 #we testen dit een aantal keer zodat random minder kans heeft om telkens dezelfde aan te roepen, dit maakt testen makkelijker

#assertions voor de scores_for functie
b = Board(7, 6)
b.set_board('1211244445')
#print(b)

# 0-ply lookahead ziet geen bedreigingen
assert Player('X', 'LEFT', 0).scores_for(b) == [50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0]

# 1-play lookahead ziet een manier om te winnen
# (als het de beurt van 'O' was!)
assert Player('O', 'LEFT', 1).scores_for(b) == [50.0, 50.0, 50.0, 100.0, 50.0, 50.0, 50.0]

# 2-ply lookahead ziet manieren om te verliezen
# ('X' kan maar beter in kolom 3 spelen...)
assert Player('X', 'LEFT', 2).scores_for(b) == [0.0, 0.0, 0.0, 50.0, 0.0, 0.0, 0.0]

# 3-ply lookahead ziet indirecte overwinningen
# ('X' ziet dat kolom 3 een overwinning oplevert!)
assert Player('X', 'LEFT', 3).scores_for(b) == [0.0, 0.0, 0.0, 100.0, 0.0, 0.0, 0.0]

# Bij 3-ply ziet 'O' nog geen gevaar
# als hij in een andere kolom speelt
assert Player('O', 'LEFT', 3).scores_for(b) == [50.0, 50.0, 50.0, 100.0, 50.0, 50.0, 50.0]

# Maar bij 4-ply ziet 'O' wel het gevaar!
# weer jammer dat het niet de beurt van 'O' is...
assert Player('O', 'LEFT', 4).scores_for(b) == [0.0, 0.0, 0.0, 100.0, 0.0, 0.0, 0.0]

#assertions voor de functie next_move
b = Board(7, 6)
b.set_board('1211244445')
#print(b)

assert Player('X', 'LEFT', 1).next_move(b) == 0
assert Player('X', 'RIGHT', 1).next_move(b) == 6
assert Player('X', 'LEFT', 2).next_move(b) == 3

# de keuzestrategie maakt niet uit
# als er maar één beste zet is...
assert Player('X', 'RIGHT', 2).next_move(b) == 3

# nogmaals, de keuzestrategie maakt niet uit
# als er maar één beste zet is...
assert Player('X', 'RANDOM', 2).next_move(b) == 3

#assertions voor de switch_xo hulpfunctie
yin= Board(7,6)
yang= Board(7,6)
yin.set_board('121212121234343434565656')
yang.set_board('212121212143434343656565')
Board.switch_xo(yang)
assert yin.data==yang.data

#assertion for the function three_in_row
b = Board(7, 6)
b.set_board('01010')
assert b.three_in_row('X') == True
assert b.three_in_row('O') == False
b = Board(7,6)
b.set_board('2334544551')
assert b.three_in_row('X') == True
assert b.three_in_row('O') == False
b = Board(7,6)
b.set_board('5443313')
assert b.three_in_row('X') == True
assert b.three_in_row('O') == False
b = Board(7,6)
b.set_board('504152')
assert b.three_in_row('O') == True
assert b.three_in_row('X') == False




        
            
